// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ================================================================
// Agent & System Models
// ================================================================
model Agent {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  name          String        @unique
  description   String
  type          AgentType
  status        String        @default("idle")
  invocations   Int           @default(0)
  lastInvokedAt DateTime?
  logs          ActionLog[]
  events        SecurityEvent[]
}

enum AgentType {
  CONVERSATIONAL
  WEB_INTELLECT
  TASK_ORCHESTRATOR
  CONTENT_SYNTHESIZER
  DATA_CRUNCHER
  SUPPORT_RESPONDER
}

model ActionLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  agentId   String
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  toolName  String
  arguments Json?
  status    String // "success" or "failure"
  result    Json?
  tokens    Int?
}

model SecurityEvent {
  id        String       @id @default(cuid())
  timestamp DateTime     @default(now())
  type      String
  severity  SeverityLevel
  details   Json
  agentId   String?
  agent     Agent?       @relation(fields: [agentId], references: [id], onDelete: SetNull)
}

enum SeverityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// ================================================================
// Accounting Micro-App Models
// ================================================================
model Invoice {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  client     String
  amount     Float
  dueDate    DateTime
  status     InvoiceStatus @default(DRAFT)
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
}

model Transaction {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  date      DateTime
  account   String
  type      TransactionType
  debit     Float?
  credit    Float?
}

enum TransactionType {
  INCOME
  EXPENSE
  ASSET
  LIABILITY
  EQUITY
}
