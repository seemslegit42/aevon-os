
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ===================================
// User and Organization Models
// ===================================

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  name           String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  subscription   Subscription?
  layouts        Layout[]
  workflows      Workflow[]
}

model Organization {
  id            String         @id @default(cuid())
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  users         User[]
  subscriptions Subscription[]
  layouts       Layout[]
  workflows     Workflow[]
  ledgerEntries LedgerEntry[]
  invoices      Invoice[]
}

// ===================================
// Subscription and Billing Models
// ===================================

enum SubscriptionPlan {
  FREE
  PRO
  TEAM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  CANCELED
  PAST_DUE
}

model Subscription {
  id             String             @id @default(cuid())
  organizationId String
  organization   Organization       @relation(fields: [organizationId], references: [id])
  userId         String?            @unique // Optional if billing is per-org
  user           User?              @relation(fields: [userId], references: [id])
  plan           SubscriptionPlan   @default(FREE)
  status         SubscriptionStatus @default(ACTIVE)
  renewsOn       DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

// ===================================
// OS and App State Models
// ===================================

model Layout {
  id             String       @id @default(cuid())
  name           String       @default("Default")
  isDefault      Boolean      @default(true)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  items          Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, name])
}

model Workflow {
  id             String       @id @default(cuid())
  name           String
  description    String?
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  nodes          Json
  connections    Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

// ===================================
// Financial Micro-App Models
// ===================================

enum LedgerEntryType {
  INCOME
  EXPENSE
  ASSET
  LIABILITY
  EQUITY
}

model LedgerEntry {
  id             String          @id @default(cuid())
  organizationId String
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  date           DateTime
  account        String
  type           LedgerEntryType
  debit          Float?
  credit         Float?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  VOID
}

model Invoice {
  id             String        @id @default(cuid())
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  client         String
  date           DateTime      @default(now())
  dueDate        DateTime
  amount         Float
  status         InvoiceStatus @default(DRAFT)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}
